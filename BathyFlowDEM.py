# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BathyFlowDEM
                                 A QGIS plugin
 Interpolation plugin for bathymetric data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-12-28
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Melinda Femminis
        email                : Contact
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from qgis.core import Qgis, QgsProject
from qgis.utils import iface
import processing

from osgeo import gdal
from osgeo.gdalconst import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .BathyFlowDEM_dialog import BathyFlowDEMDialog

import os.path
from qgis.core import QgsMapLayerProxyModel, QgsFieldProxyModel


class BathyFlowDEM:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        # Save reference to the QGIS interface
        self.iface = iface                                                                                                                          
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'BathyFlowDEM_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&BathyFlowDEM')

        # Create instance of dialog class
        self.dlg = BathyFlowDEMDialog()

        


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('BathyFlowDEM', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action
    




    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/BathyFlowDEM/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Create DEM'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # Connect dialog signals and slots
        self.dlg.cbInputPoints.layerChanged.connect(self.onCbInputPointsWidget_layerChanged)

        # Populate attribute field with selected point layer
        self.onCbInputPointsWidget_layerChanged()




    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&BathyFlowDEM'),
                action)
            self.iface.removeToolBarIcon(action)



    # Errors and exceptions functions
    def check_data_inputs(self, points, centerline, polygon):
        if points == None or centerline == None or polygon == None:
            self.iface.messageBar().pushMessage("Error", "All input fields must have a layer selected.", level=Qgis.Critical)
            pass
        elif str(points.fields().names()) != [str(['x', 'y', 'z']), str(['X', 'Y', 'Z'])]:
            self.iface.messageBar().pushMessage("Error", "Point layer's fields' names must be X,Y,Z. Modify and try again.", level=Qgis.Critical)
            pass
        else: 
            print(points.fields.names())
            return True   




    def onCbInputPointsWidget_layerChanged(self):
        """Slot method called when the seleted layer in cbInputPoints is changed"""
        current_point_layer = self.dlg.cbInputPoints.currentLayer()
        self.dlg.cbAttributeFields.setLayer(current_point_layer)
        self.dlg.cbAttributeFields.setFilters(QgsFieldProxyModel.Numeric)
        print("Point layer changed method")





    def points_on_centerline(self, centerline):
        """Creates points along the given centerline each m. Need to implement how to let the user choose the distance of the points."""
        # From doc: processing.run("algorithm_id", {'parameter_dictionary})

        print("Insite the points along line algorith.")
        # Create the parameters dictionnary for the points along line alorithm
        PAL_params = {
            'INPUT': centerline,
            'DISTANCE': 1,
            'START_OFFSET': 0,
            'END_OFFSET': 0,
            'OUTPUT': 'TEMPORARY_OUTPUT'
        }

        # Run the algorithm
        layer_PAL = processing.run("native:pointsalonglines", PAL_params)

        # Add to map for vizualisation
        QgsProject.instance().addMapLayer(layer_PAL['OUTPUT'])









    def run(self):
        """Run method that performs all the real work"""

        # Restrict the type of layer that can be selected in the combo boxes
        self.dlg.cbInputBoundary.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.dlg.cbInputPoints.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.dlg.cbInputCenterline.setFilters(QgsMapLayerProxyModel.LineLayer)

        # PLaceholders for output layer name
        # TODO: add placeholder for QgsFileWidget
        self.dlg.leOutputName.setPlaceholderText("bathyflowDEM_output")

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()

        # Populate attribute field with selected point layer
        self.onCbInputPointsWidget_layerChanged()
        
    
        # See if OK was pressed
        if result:

            """Get user inputs"""
            point_layer = self.dlg.cbInputPoints.currentLayer()
            centerline_layer = self.dlg.cbInputCenterline.currentLayer()
            boundary_layer = self.dlg.cbInputBoundary.currentLayer()
            cell_size = self.dlg.sbCellSize.value()
            show_output_checked = self.dlg.cbOpenOutputFile.isChecked()

            """Get user outputs"""
            user_output_dir_path = self.dlg.saveDirWidget.filePath() # might or might not be a path
            user_output_layer_name = self.dlg.leOutputName.displayText() # might or might not be a name

            """Define user output path"""
            if not user_output_dir_path:
                pass
            else:
                if not user_output_layer_name:
                    output_path = user_output_dir_path + "\\bathyflowdem_output.shp"
                else:
                    output_path = user_output_dir_path + "\\" + user_output_layer_name + ".shp"
            
            # Create layer with points along centerline
            self.points_on_centerline(centerline_layer)

            """Tests and errors"""
            # self.check_data_inputs(point_layer, centerline_layer, boundary_layer)


            if show_output_checked == True:
                if not user_output_dir_path and not user_output_layer_name: # no path so we can load tmp layer
                    new_layer = processing.runAndLoadResults("native:centroids", {'INPUT':boundary_layer,
                                                                                  'ALL_PARTS':False,
                                                                                  'OUTPUT':'memory:testing_name', 
                                                                                  'NAME':'bathyflowDEM_output'})
                    print(new_layer)
                else: # if there is a dir path, output path was defined earlier
                    new_layer = processing.runAndLoadResults("native:centroids", {'INPUT':boundary_layer,
                                                                                  'ALL_PARTS':False,
                                                                                  'OUTPUT': output_path})
                    self.iface.messageBar().pushMessage("BathyFlowDEM", "Finished. New layer saved at " + output_path, level=Qgis.Success)
                    print(new_layer)
            else:
                if not user_output_dir_path: # wether user added filename or not
                    self.iface.messageBar().pushMessage("BathyFlowDEM", "Choose output directory or to load temporary layer.", level=Qgis.Warning)
                else: # if there is a dir path, output path was defined earlier
                    new_layer = processing.run("native:centroids", {'INPUT':boundary_layer,
                                                                    'ALL_PARTS':False,
                                                                    'OUTPUT': output_path})
                    self.iface.messageBar().pushMessage("BathyFlowDEM", "Finished. New layer saved at " + output_path, level=Qgis.Success)
      
            

